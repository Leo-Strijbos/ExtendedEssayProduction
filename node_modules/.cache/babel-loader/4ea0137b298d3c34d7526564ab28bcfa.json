{"ast":null,"code":"function translate(st) {\n  let translated = \"\";\n  let lines = st.split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trimStart();\n    line = line.toLowerCase();\n    let words = line.split(\" \"); // Fixing logic\n\n    line = line.replace(\" and \", \"&&\");\n    line = line.replace(\" or \", \"||\");\n    line = line.replace(\" mod \", \" % \");\n\n    if (words.indexOf(\"div\") != -1) {\n      let calc = Math.floor(parseInt(words[words.indexOf(\"div\") - 1]) / parseInt(words[words.indexOf(\"div\") + 1]));\n      let bigger = parseInt(words[words.indexOf(\"div\") - 1]);\n      console.log(bigger);\n      bigger = bigger.replace(/(\\d+)/g, \"\");\n      let smaller = parseInt(words[words.indexOf(\"div\") + 1]);\n      smaller = smaller.replace(/(\\d+)/g, \"\");\n      let js = \"Math.floor(\" + bigger + \"/\" + smaller + \")\\n\";\n      line = line.replace(bigger.toString() + \" div \" + smaller.toString(), js);\n    } // Checking for IF statements\n\n\n    if (line.startsWith(\"if not\")) {\n      // ...\n      line = line.replace(\"if not \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"if (!(\" + line + \")) {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"if\")) {\n      // ...\n      line = line.replace(\"if \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"if (\" + line + \") {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"else if\")) {\n      // ...\n      line = line.replace(\"else if \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"} else if (\" + line + \") {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"else\")) {\n      // ...\n      let js = \"} else {\";\n      translated = translated + js + \"\\n\";\n    } // Checking for loops\n    else if (line.startsWith(\"loop while\")) {\n        // ...\n        line = line.replace(\"loop while \", \"\");\n        line = line.replace(\"=\", \"==\");\n        let js = \"while (\" + line + \") {\";\n        translated = translated + js + \"\\n\";\n      } else if (line.startsWith(\"loop until\")) {\n        // ...\n        line = line.replace(\"loop until \", \"\");\n        line = line.replace(\"=\", \"==\");\n        let js = \"while !(\" + line + \") {\";\n        translated = translated + js + \"\\n\";\n      } else if (line.startsWith(\"loop\")) {\n        // Any other loop\n        let v = words[1];\n\n        try {\n          let js = \"for (let \" + v + \"=\" + words[3] + \"; \" + v + \"<\" + (parseInt(words[5]) + 1).toString() + \"; \" + v + \"++ ) {\";\n          translated = translated + js + \"\\n\";\n        } catch {\n          console.log(\"Looping error\");\n          break;\n        }\n      } // Checking for other keywords\n      else if (line.startsWith(\"output\")) {\n          // ...\n          line = line.replace(\"output\", \"\");\n          line = line.trimStart();\n          let js = \"console.log(\" + line + \")\";\n          translated = translated + js + \"\\n\";\n        } else if (line.startsWith(\"end\")) {\n          // ...\n          let js = \"}\";\n          translated = translated + js + \"\\n\";\n        } else if (line.startsWith(\"method\")) {// ...\n        } else if (line.startsWith(\"function\")) {// ...\n        } else {\n          translated = translated + line + \"\\n\";\n        }\n  }\n\n  return translated;\n}\n\nexport default translate; // break into specific lines\n// find specific structure\n// CONDITIONALS\n// if case = ... then\n//      ....\n// end if\n// LOOPING\n// NUM = [1, 2, 3, 4, 5, 6]\n// loop I from 0 to 99\n//      OUTPUT(\"Num \", NUM[I])\n// end loop\n// LOOPING THROUGH COLLECTIONS\n// collection = Collection()\n// collection.resetNext()\n// loop while collect.hasNext()\n//     el = collection.getNext()\n//     collection.addItem(\"Hello\")\n//     bool = collection.isEmpty()\n//     length = collection.length()\n// end loop\n// STACKS\n// push(), pop(), isEmpty()\n// QUEUES\n// enqueue(), dequeue(), isEmpty()\n// DIV and MOD\n// 3 div 2\n// 3 mod 2\n// OTHER LOOPS\n// loop until ...\n// loop while ...\n// Data type transformation\n// int(...)\n// str(...)","map":{"version":3,"sources":["/Users/leostrijbos/Desktop/Files/School/IB Computer Science/compiler/src/translate.js"],"names":["translate","st","translated","lines","split","i","length","line","trimStart","toLowerCase","words","replace","indexOf","calc","Math","floor","parseInt","bigger","console","log","smaller","js","toString","startsWith","v"],"mappings":"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","sourcesContent":["function translate(st) {\n    let translated = \"\"\n\n    let lines = st.split(/\\r?\\n/)\n\n    for (let i=0; i<lines.length; i++ ) {\n        let line = lines[i]\n        line = line.trimStart()\n        line = line.toLowerCase()\n\n        let words = line.split(\" \")\n\n        // Fixing logic\n        line = line.replace(\" and \", \"&&\")\n        line = line.replace(\" or \", \"||\")\n        line = line.replace(\" mod \", \" % \")\n        if (words.indexOf(\"div\") != -1) {\n            let calc = Math.floor(parseInt(words[words.indexOf(\"div\") - 1])/parseInt(words[words.indexOf(\"div\") + 1]))\n            let bigger = parseInt(words[words.indexOf(\"div\") - 1])\n            console.log(bigger)\n            bigger = bigger.replace(/(\\d+)/g,\"\")\n            let smaller = parseInt(words[words.indexOf(\"div\") + 1])\n            smaller = smaller.replace(/(\\d+)/g, \"\")\n            let js = \"Math.floor(\"+bigger+\"/\"+smaller+\")\\n\"\n            line = line.replace((bigger.toString()+\" div \"+smaller.toString()), js)\n        }\n\n        // Checking for IF statements\n        if (line.startsWith(\"if not\")) {\n            // ...\n            line = line.replace(\"if not \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n            \n            let js = \"if (!(\"+line+\")) {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"if\")) {\n            // ...\n            line = line.replace(\"if \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"if (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"else if\")) {\n            // ...\n            line = line.replace(\"else if \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"} else if (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"else\")) {\n            // ...\n\n            let js = \"} else {\"\n            translated = translated+js+\"\\n\"\n        }\n\n        // Checking for loops\n        else if (line.startsWith(\"loop while\")) {\n            // ...\n            line = line.replace(\"loop while \",\"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"while (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"loop until\")) {\n            // ...\n            line = line.replace(\"loop until \",\"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"while !(\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"loop\")) {\n            // Any other loop\n            \n            let v = words[1]\n            try{\n                let js = \"for (let \"+v+\"=\"+words[3]+\"; \"+v+\"<\"+(parseInt(words[5])+1).toString()+\"; \"+v+\"++ ) {\"\n                translated = translated+js+\"\\n\"\n            } catch {\n                console.log(\"Looping error\")\n                break\n            }\n            \n        }\n        \n        // Checking for other keywords\n        else if (line.startsWith(\"output\")) {\n            // ...\n            line = line.replace(\"output\", \"\")\n            line = line.trimStart()\n\n            let js = \"console.log(\"+line+\")\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"end\")) {\n            // ...\n            let js = \"}\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"method\")) {\n            // ...\n        } else if (line.startsWith(\"function\")) {\n            // ...\n        } else {\n          translated = translated+line+\"\\n\" \n        }\n    }\n\n    return(translated)\n}\nexport default translate\n\n    // break into specific lines\n    // find specific structure\n\n    // CONDITIONALS\n    // if case = ... then\n    //      ....\n    // end if\n\n    // LOOPING\n    // NUM = [1, 2, 3, 4, 5, 6]\n    // loop I from 0 to 99\n    //      OUTPUT(\"Num \", NUM[I])\n    // end loop\n\n    // LOOPING THROUGH COLLECTIONS\n    // collection = Collection()\n    // collection.resetNext()\n    // loop while collect.hasNext()\n    //     el = collection.getNext()\n    //     collection.addItem(\"Hello\")\n    //     bool = collection.isEmpty()\n    //     length = collection.length()\n    // end loop\n\n    // STACKS\n    // push(), pop(), isEmpty()\n\n    // QUEUES\n    // enqueue(), dequeue(), isEmpty()\n\n    // DIV and MOD\n    // 3 div 2\n    // 3 mod 2\n\n    // OTHER LOOPS\n    // loop until ...\n    // loop while ...\n\n    // Data type transformation\n    // int(...)\n    // str(...)"]},"metadata":{},"sourceType":"module"}