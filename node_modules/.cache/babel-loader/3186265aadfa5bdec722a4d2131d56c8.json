{"ast":null,"code":"function translate(st) {\n  let translated = \"\";\n  let lines = st.split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trimStart();\n    line = line.toLowerCase();\n    let words = line.split(\" \"); // Fixing logic\n\n    line = line.replace(\" and \", \"&&\");\n    line = line.replace(\" or \", \"||\");\n    line = line.replace(\" mod \", \" % \");\n\n    if (words.indexOf(\"div\") != -1) {\n      try {\n        let num1 = 0;\n        let num2 = 0;\n\n        try {\n          num1 = parseInt(words[words.indexOf(\"div\") - 1]).toString();\n        } catch {\n          let bigger = words[words.indexOf(\"div\") - 1];\n          console.log(bigger);\n          num1 = parseInt(bigger.match(/\\d/g).join(\"\")).toString();\n        }\n\n        try {\n          num2 = parseInt(words[words.indexOf(\"div\") + 1]).toString();\n        } catch {\n          let smaller = words[words.indexOf(\"div\") + 1];\n          num2 = parseInt(smaller.match(/\\D/)).toString();\n        }\n\n        let js = \"Math.floor(\" + num1 + \"/\" + num2 + \")\\n\";\n        console.log(\"JS: \", js);\n        line = line.replace(num1 + \" div \" + num2, js);\n        console.log(\"LINE: \", line);\n      } catch {\n        console.log(\"Div problem\");\n      }\n    } // Checking for IF statements\n\n\n    if (line.startsWith(\"if not\")) {\n      // ...\n      line = line.replace(\"if not \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"if (!(\" + line + \")) {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"if\")) {\n      // ...\n      line = line.replace(\"if \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"if (\" + line + \") {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"else if\")) {\n      // ...\n      line = line.replace(\"else if \", \"\");\n      line = line.replace(\"then\", \"\");\n      line = line.replace(\"=\", \"==\");\n      let js = \"} else if (\" + line + \") {\";\n      translated = translated + js + \"\\n\";\n    } else if (line.startsWith(\"else\")) {\n      // ...\n      let js = \"} else {\";\n      translated = translated + js + \"\\n\";\n    } // Checking for loops\n    else if (line.startsWith(\"loop while\")) {\n        // ...\n        line = line.replace(\"loop while \", \"\");\n        line = line.replace(\"=\", \"==\");\n        let js = \"while (\" + line + \") {\";\n        translated = translated + js + \"\\n\";\n      } else if (line.startsWith(\"loop until\")) {\n        // ...\n        line = line.replace(\"loop until \", \"\");\n        line = line.replace(\"=\", \"==\");\n        let js = \"while !(\" + line + \") {\";\n        translated = translated + js + \"\\n\";\n      } else if (line.startsWith(\"loop\")) {\n        // Any other loop\n        let v = words[1];\n\n        try {\n          let js = \"for (let \" + v + \"=\" + words[3] + \"; \" + v + \"<\" + (parseInt(words[5]) + 1).toString() + \"; \" + v + \"++ ) {\";\n          translated = translated + js + \"\\n\";\n        } catch {\n          console.log(\"Looping error\");\n          break;\n        }\n      } // Checking for other keywords\n      else if (line.startsWith(\"output\")) {\n          // ...\n          line = line.replace(\"output\", \"\");\n          line = line.trimStart();\n          let js = \"console.log(\" + line + \")\";\n          translated = translated + js + \"\\n\";\n        } else if (line.startsWith(\"end\")) {\n          // ...\n          let js = \"}\";\n          translated = translated + js + \"\\n\";\n        } else if (line.startsWith(\"method\")) {// ...\n        } else if (line.startsWith(\"function\")) {// ...\n        } else {\n          translated = translated + line + \"\\n\";\n        }\n  }\n\n  return translated;\n}\n\nexport default translate; // break into specific lines\n// find specific structure\n// CONDITIONALS\n// if case = ... then\n//      ....\n// end if\n// LOOPING\n// NUM = [1, 2, 3, 4, 5, 6]\n// loop I from 0 to 99\n//      OUTPUT(\"Num \", NUM[I])\n// end loop\n// LOOPING THROUGH COLLECTIONS\n// collection = Collection()\n// collection.resetNext()\n// loop while collect.hasNext()\n//     el = collection.getNext()\n//     collection.addItem(\"Hello\")\n//     bool = collection.isEmpty()\n//     length = collection.length()\n// end loop\n// STACKS\n// push(), pop(), isEmpty()\n// QUEUES\n// enqueue(), dequeue(), isEmpty()\n// DIV and MOD\n// 3 div 2\n// 3 mod 2\n// OTHER LOOPS\n// loop until ...\n// loop while ...\n// Data type transformation\n// int(...)\n// str(...)","map":{"version":3,"sources":["/Users/leostrijbos/Desktop/Files/School/IB Computer Science/compiler/src/translate.js"],"names":["translate","st","translated","lines","split","i","length","line","trimStart","toLowerCase","words","replace","indexOf","num1","num2","parseInt","toString","bigger","console","log","match","join","smaller","js","startsWith","v"],"mappings":"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","sourcesContent":["function translate(st) {\n    let translated = \"\"\n\n    let lines = st.split(/\\r?\\n/)\n\n    for (let i=0; i<lines.length; i++ ) {\n        let line = lines[i]\n        line = line.trimStart()\n        line = line.toLowerCase()\n\n        let words = line.split(\" \")\n\n        // Fixing logic\n        line = line.replace(\" and \", \"&&\")\n        line = line.replace(\" or \", \"||\")\n        line = line.replace(\" mod \", \" % \")\n        if (words.indexOf(\"div\") != -1) { \n            try {\n                let num1 = 0\n                let num2 = 0\n                try {\n                    num1 = parseInt(words[words.indexOf(\"div\") - 1]).toString()\n                } catch {\n                    let bigger = words[words.indexOf(\"div\") - 1]\n                    console.log(bigger)\n                \n                    num1 = parseInt(bigger.match(/\\d/g).join(\"\")).toString()\n                }\n                try {\n                    num2 = parseInt(words[words.indexOf(\"div\") + 1]).toString()\n                } catch {\n                    let smaller = words[words.indexOf(\"div\") + 1]\n                    num2 = parseInt(smaller.match(/\\D/)).toString()\n                }\n                \n                let js = \"Math.floor(\"+num1+\"/\"+num2+\")\\n\"\n                console.log(\"JS: \",js)\n                line = line.replace((num1+\" div \"+num2), js)\n                console.log(\"LINE: \",line)\n            } catch {\n                console.log(\"Div problem\")\n            } \n            \n        }\n\n        // Checking for IF statements\n        if (line.startsWith(\"if not\")) {\n            // ...\n            line = line.replace(\"if not \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n            \n            let js = \"if (!(\"+line+\")) {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"if\")) {\n            // ...\n            line = line.replace(\"if \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"if (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"else if\")) {\n            // ...\n            line = line.replace(\"else if \", \"\")\n            line = line.replace(\"then\", \"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"} else if (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"else\")) {\n            // ...\n\n            let js = \"} else {\"\n            translated = translated+js+\"\\n\"\n        }\n\n        // Checking for loops\n        else if (line.startsWith(\"loop while\")) {\n            // ...\n            line = line.replace(\"loop while \",\"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"while (\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"loop until\")) {\n            // ...\n            line = line.replace(\"loop until \",\"\")\n            line = line.replace(\"=\", \"==\")\n\n            let js = \"while !(\"+line+\") {\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"loop\")) {\n            // Any other loop\n            \n            let v = words[1]\n            try{\n                let js = \"for (let \"+v+\"=\"+words[3]+\"; \"+v+\"<\"+(parseInt(words[5])+1).toString()+\"; \"+v+\"++ ) {\"\n                translated = translated+js+\"\\n\"\n            } catch {\n                console.log(\"Looping error\")\n                break\n            }\n            \n        }\n        \n        // Checking for other keywords\n        else if (line.startsWith(\"output\")) {\n            // ...\n            line = line.replace(\"output\", \"\")\n            line = line.trimStart()\n\n            let js = \"console.log(\"+line+\")\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"end\")) {\n            // ...\n            let js = \"}\"\n            translated = translated+js+\"\\n\"\n        } else if (line.startsWith(\"method\")) {\n            // ...\n        } else if (line.startsWith(\"function\")) {\n            // ...\n        } else {\n          translated = translated+line+\"\\n\" \n        }\n    }\n\n    return(translated)\n}\nexport default translate\n\n    // break into specific lines\n    // find specific structure\n\n    // CONDITIONALS\n    // if case = ... then\n    //      ....\n    // end if\n\n    // LOOPING\n    // NUM = [1, 2, 3, 4, 5, 6]\n    // loop I from 0 to 99\n    //      OUTPUT(\"Num \", NUM[I])\n    // end loop\n\n    // LOOPING THROUGH COLLECTIONS\n    // collection = Collection()\n    // collection.resetNext()\n    // loop while collect.hasNext()\n    //     el = collection.getNext()\n    //     collection.addItem(\"Hello\")\n    //     bool = collection.isEmpty()\n    //     length = collection.length()\n    // end loop\n\n    // STACKS\n    // push(), pop(), isEmpty()\n\n    // QUEUES\n    // enqueue(), dequeue(), isEmpty()\n\n    // DIV and MOD\n    // 3 div 2\n    // 3 mod 2\n\n    // OTHER LOOPS\n    // loop until ...\n    // loop while ...\n\n    // Data type transformation\n    // int(...)\n    // str(...)"]},"metadata":{},"sourceType":"module"}